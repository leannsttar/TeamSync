generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int                  @id @default(autoincrement())
  email             String?              @unique
  name              String?
  password          String?
  image             String
  confirmed         Boolean              @default(false)
  confirmationToken String?              // null después de confirmar
  comments          Comments[]
  files             Files[]
  links             Links[]
  meetings          Meetings[]
  meetingAttendance MeetingsAttendance[]
  messages          Messages[]
  
  // Relación con notificaciones que recibe el usuario
  notifications     Notifications[]      @relation("UserNotifications")
  
  // Relación con notificaciones donde el usuario realizó la acción
  actionNotifications Notifications[]    @relation("ActionUserNotifications")

  tasks             Tasks[]
  teams             TeamProject[]
  timeline          Timeline[]
  assignedTasks     TasksAssignees[]
}


model Projects {
  id          Int           @id @default(autoincrement())
  name        String
  percentage  Float         @default(0)
  description String
  imagen      String
  createdAt   DateTime      @default(now())
  meetings    Meetings[]
  messages    Messages[]
  tasks       Tasks[]
  team        TeamProject[]
  tags        Tags[]
  invitations Invitations[]
}

model TeamProject {
  id        Int      @id @default(autoincrement())
  role      String
  userId    Int
  projectId Int
  project   Projects @relation(fields: [projectId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}

model Invitations {
  id             String   @id @default(uuid())
  email          String
  projectId      Int
  project        Projects @relation(fields: [projectId], references: [id])
  status         String   @default("pending") // "pending", "accepted", "rejected"
  expirationDate DateTime
  createdAt      DateTime @default(now())
}

model Tasks {
  id            Int              @id @default(autoincrement())
  name          String
  status        String
  description   String
  due_date      DateTime
  projectId     Int
  authorId      Int
  comments      Comments[]
  files         Files[]
  links         Links[]
  notifications Notifications[]
  subTasks      SubTasks[]
  tags          TaskTags[]
  creator       Users            @relation(fields: [authorId], references: [id])
  project       Projects         @relation(fields: [projectId], references: [id])
  timeline      Timeline[]
  assignees     TasksAssignees[]
}

model SubTasks {
  id     Int    @id @default(autoincrement()) 
  name   String
  status String
  taskId Int
  task   Tasks  @relation(fields: [taskId], references: [id])
}

model TasksAssignees {
  id     Int   @id @default(autoincrement())
  taskId Int
  userId Int
  task   Tasks @relation(fields: [taskId], references: [id])
  user   Users @relation(fields: [userId], references: [id])
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  taskId    Int
  authorId  Int
  author    Users    @relation(fields: [authorId], references: [id])
  task      Tasks    @relation(fields: [taskId], references: [id])
}

model Files {
  id       Int    @id @default(autoincrement())
  fileName String
  fileType String
  fileSize Float
  url      String
  taskId   Int
  authorId Int
  author   Users  @relation(fields: [authorId], references: [id])
  task     Tasks  @relation(fields: [taskId], references: [id])
}

model Links {
  id       Int    @id @default(autoincrement())
  url      String
  taskId   Int
  authorId Int
  author   Users  @relation(fields: [authorId], references: [id])
  task     Tasks  @relation(fields: [taskId], references: [id])
}

model Tags {
  id        Int        @id @default(autoincrement())
  name      String
  projectId Int
  project   Projects   @relation(fields: [projectId], references: [id])
  taskTags  TaskTags[]
}

model TaskTags {
  id     Int   @id @default(autoincrement())
  tagId  Int
  taskId Int
  tag    Tags  @relation(fields: [tagId], references: [id])
  task   Tasks @relation(fields: [taskId], references: [id])
}

model Notifications {
  id            Int      @id @default(autoincrement())
  content       String
  type          String
  taskId        Int?
  userId        Int
  actionUserId  Int      // Nueva columna para el usuario que realizó la acción
  event_time    DateTime @default(now())
  
  // Relación con el modelo Tasks
  task          Tasks?    @relation(fields: [taskId], references: [id])
  
  // Relación con el modelo Users para el usuario que recibe la notificación
  user          Users    @relation("UserNotifications", fields: [userId], references: [id])

  // Relación con el modelo Users para el usuario que realizó la acción
  actionUser    Users    @relation("ActionUserNotifications", fields: [actionUserId], references: [id])
}

model Messages {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  projectId Int
  sentAt    DateTime @default(now())
  project   Projects @relation(fields: [projectId], references: [id])
  sender    Users    @relation(fields: [senderId], references: [id])
}

model Timeline {
  id          Int      @id @default(autoincrement())
  description String
  event_time  DateTime @default(now())
  event_type  String
  table_name  String
  taskId      Int
  userId      Int
  task        Tasks    @relation(fields: [taskId], references: [id])
  user        Users    @relation(fields: [userId], references: [id])
}

model Meetings {
  id         String               @unique
  event_time DateTime
  projectId  Int
  authorId   Int
  author     Users                @relation(fields: [authorId], references: [id])
  project    Projects             @relation(fields: [projectId], references: [id])
  attendance MeetingsAttendance[]
}

model MeetingsAttendance {
  id        Int      @id @default(autoincrement())
  meetingId String
  userId    Int
  meeting   Meetings @relation(fields: [meetingId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}
